/*
Name: MohammadTufail A Akkalkot
Project: To implement a circular queue
Date: 06/12/2023
*/

#include <stdio.h>
#include <stdlib.h>

typedef struct                                  //creating and renaming a strucuture
{
    int *queue;                                                          
    int front, rear;                             //strucuture members
    int capacity ;                             
} circularqueue;                               //new name of struct

circularqueue* createqueue(int capacity)                  //function to allocate the memory for queue
{
    circularqueue* queue = (circularqueue*)malloc(sizeof(circularqueue));
    queue->capacity = capacity;
    queue->queue = (int*)malloc(sizeof(int) * capacity);
    queue->front = queue->rear = -1; 
    return queue;
}

int is_empty(circularqueue* queue)                         //function to check queue is empty or not 
{
    return queue->front == -1; 
}

int is_full(circularqueue* queue)                         //function to check the queue is full 
{
    return (queue->rear + 1) % queue->capacity == queue->front;
}

void read_queue(circularqueue* queue)                           //function to read the elements in the queue
{
    if (is_empty(queue)) 
    {
        printf("Queue is empty\n");
    } 
    else 
    {
        printf("The elements in queue is : %d\n", queue->queue[queue->front]);

        if (queue->front == queue->rear)                       
        {
            queue->front = queue->rear = -1; 
        }
        else 
        {
            queue->front = (queue->front + 1) % queue->capacity;
        }
    }   
}

void write_queue(circularqueue* queue, int data)                    //function to write the elemnts in the queue
{
    if (is_full(queue)) 
    {
        queue->front = (queue->front + 1) % queue->capacity;
    }   

    if (is_empty(queue)) 
    {
    queue->front = queue->rear = 0;
    } 
    else 
    {
        queue->rear = (queue->rear + 1) % queue->capacity;
    }

    queue->queue[queue->rear] = data;
}

void clear_queue(circularqueue* queue) 
{
    free(queue->queue);
    free(queue);
}

int main() 
{
    int capacity;
    printf("Enter the capacity of the queue\n");
    scanf("%d", &capacity);
    circularqueue* myqueue = createqueue(capacity);

    write_queue(myqueue, 1);
    write_queue(myqueue, 2);
    write_queue(myqueue, 3);
    write_queue(myqueue, 4);
    write_queue(myqueue, 5);

    write_queue(myqueue, 6);

    for(int i=0; i<capacity; i++)
    {
    read_queue(myqueue);
    }


    clear_queue(myqueue);

    return 0;
}


