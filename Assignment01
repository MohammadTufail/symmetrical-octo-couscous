/*
Name: MohammadTufail A Akkalkot
Project: To implement a circular queue
Date: 08/12/2023
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

typedef struct 
{                                  //Queue structure
    int front, rear;
    int size;
    int *array;
} Circularqueue;

Circularqueue* initializequeue()  
{                                                                          //function to initializeQueue
    Circularqueue* queue = (Circularqueue*)malloc(sizeof(Circularqueue));
    if (queue == NULL)  
    {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }

    queue->front = queue->rear = -1;
    queue->size = MAX_SIZE;
    queue->array = (int*)malloc(MAX_SIZE * sizeof(int));
    if (queue->array == NULL) 
    {
        printf("Memory allocation failed.\n");
        free(queue);
        exit(EXIT_FAILURE);
    }

    return queue;
}
int isEmpty(Circularqueue* queue) 
                                                 {                    //function to check queue is empty or not
    return (queue->front == -1);
}

int isFull(Circularqueue* queue) 
{                                                                      //function to check queue is full
    return ((queue->rear + 1) % queue->size == queue->front);
}

void writeQueue(Circularqueue* queue, int data) 
{
    if (isFull(queue))                                                //function to write the data into the queue
    {
        queue->front = (queue->front + 1) % queue->size;
    }
    queue->rear = (queue->rear + 1) % queue->size;

    queue->array[queue->rear] = data;
    if (isEmpty(queue)) {
        queue->front = queue->rear;
    }
}


int readQueue(Circularqueue* queue)                             //function to read from the queue
{
    int data = -1;
    if (!isEmpty(queue)) {
        data = queue->array[queue->front];

        if (queue->front == queue->rear) 
        {
            queue->front = queue->rear = -1;
        } else 
        {
            queue->front = (queue->front + 1) % queue->size;
        }
    }

    return data;
}

void clearQueue(Circularqueue* queue) 
{
    queue->front = queue->rear = -1;
}

void printQueue(Circularqueue* queue)         //function to printqueue 
{
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    int i = queue->front;
    do {
        printf("%d ", queue->array[i]);
        i = (i + 1) % queue->size;
    } while (i != (queue->rear + 1) % queue->size);
    printf("\n");
}

int main() 
{
    Circularqueue* queue = initializequeue();
    int num;
    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printQueue(queue);

    int data = readQueue(queue);
    printf("Read from queue: %d\n", data);
    printQueue(queue);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printf("Enter number to be added to queue: ");
    scanf("%d", &num);
    writeQueue(queue, num);

    printQueue(queue);

    clearQueue(queue);
    printQueue(queue);

    free(queue->array);
    free(queue);

    return 0;
}



